{"version":3,"sources":["components/TagIndexPage.module.css","components/TagPage.module.css","components/TagIndexPage.tsx","components/TagPage.tsx","routes/tags.tsx"],"names":["module","exports","TagIndexPage","TagPage","tags","react_default","a","createElement","className","styles","map","tag","key","href","dist_es","name","count","blogRoot","routes","route","url","ArticleSummary","crawlRoutes","_callee4","root","_ref","paths","regenerator_default","wrap","_context4","prev","next","cache","crawl","context","crawlingRoutes","sent","resolve","method","urls","abrupt","stop","tagRoutes","compose","withContext","req","Object","objectSpread2","tagsRoot","mountpath","withCrawlerPatterns","/:tag","_tag","asyncToGenerator","mark","_callee","_context","t0","getAvailableTagsFromRoutes","t1","t2","_x2","_x3","apply","this","arguments","mount","/","title","getView","_getView","_callee2","_context2","fromPairs","toLowerCase","forEach","data","push","components_TagIndexPage","join","length","_x4","_x5","getTitle","params","_getView2","_callee3","lowerCaseTag","_context3","find","metaTag","components_TagPage","_x6","_x7","Array","from","Set","concat"],"mappings":"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","file":"static/js/3.a56c3679.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagIndexPage\":\"TagIndexPage_TagIndexPage__1KLH1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagPage\":\"TagPage_TagPage__2Zrai\"};","import React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './TagIndexPage.module.css'\n\ninterface Tag {\n  count: number\n  href: string\n  name: string\n}\n\ninterface TagIndexPage {\n  tags: Tag[]\n}\n\nfunction TagIndexPage({ tags }: TagIndexPage) {\n  return (\n    <div className={styles.TagIndexPage}>\n      <h1>Tags</h1>\n      <ul>\n        {tags.map(tag => (\n          <li key={tag.href}>\n            <Link href={tag.href}>\n              {tag.name} ({tag.count})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagIndexPage\n","import React from 'react'\nimport ArticleSummary from './ArticleSummary'\nimport styles from './TagPage.module.css'\nimport { Route } from 'navi'\n\ninterface TagPageProps {\n  blogRoot: string\n  name: string\n  routes: Route[]\n}\n\nfunction TagPage({ blogRoot, name, routes }: TagPageProps) {\n  return (\n    <div className={styles.TagPage}>\n      <h1>{name} posts</h1>\n      <ul>\n        {routes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagPage\n","import React from 'react'\nimport { compose, crawl, mount, resolve, route, withContext, withCrawlerPatterns, Route } from 'navi'\nimport { join } from 'path'\nimport { fromPairs } from 'lodash'\nimport TagIndexPage from '../components/TagIndexPage'\nimport TagPage from '../components/TagPage'\nimport routes from './index'\n\nasync function crawlRoutes(root): Promise<Route[]> {\n  if (!crawlRoutes.cache[root]) {\n    let { paths } = await crawl({\n      context: {\n        crawlingRoutes: true,\n      },\n      root,\n      routes,\n    })\n    crawlRoutes.cache[root] = await resolve({\n      method: 'HEAD',\n      routes,\n      urls: paths,\n    }) \n  }\n  return crawlRoutes.cache[root]\n}\ncrawlRoutes.cache = {} as { [root: string]: Route[] }\n\ninterface TagsNavContext {\n  blogRoot: string\n  tagsRoot: string\n  crawlingRoutes?: boolean\n}\n\nconst tagRoutes = compose(\n  withContext((req, context): TagsNavContext => ({\n    ...context,\n    tagsRoot: req.mountpath,\n  })),\n  withCrawlerPatterns({\n    '/:tag': async (req, context: TagsNavContext) => {\n      if (!context.crawlingRoutes) {\n        return getAvailableTagsFromRoutes(\n          await crawlRoutes(context.blogRoot)\n        ).map(tag => '/'+tag)\n      }\n      return []\n    }\n  }),\n  mount({\n    '/': route<TagsNavContext>({\n      title: 'Tags',\n\n      getView: async (req, context) => {\n        // Build a list of pages for each tag\n        let routes = await crawlRoutes(context.blogRoot)\n        let tags = getAvailableTagsFromRoutes(routes)\n        let tagRoutes = fromPairs(tags.map(name => [name.toLowerCase(), []]))\n        routes.forEach(route => {\n          let data = route.data\n          if (data && data.tags) {\n            data.tags.forEach(tag => {\n              tag = tag.toLowerCase()\n              if (tagRoutes[tag]) {\n                tagRoutes[tag].push(route)\n              }\n            })\n          }\n        })\n\n        return (\n          <TagIndexPage\n            tags={tags.map(name => ({\n              name,\n              href: join(req.mountpath, name.toLowerCase()),\n              count: (tagRoutes[name] || []).length,\n            }))}\n          />\n        )\n      },\n    }),\n\n    '/:tag': route<TagsNavContext>({\n      getTitle: req => req.params.tag,\n      getView: async (req, context) => {\n        let lowerCaseTag = req.params.tag.toLowerCase()\n        let routes = await crawlRoutes(context.blogRoot)\n\n        // Build a list of pages that include the tag from the site map\n        let tagRoutes = [] as Route[]\n        routes.forEach((route: Route) => {\n          let tags = (route.data && route.data.tags) || []\n          if (tags.find(metaTag => metaTag.toLowerCase() === lowerCaseTag)) {\n            tagRoutes.push(route)\n          }\n        })\n\n        return (\n          <TagPage\n            blogRoot={context.blogRoot}\n            name={req.params.tag}\n            routes={tagRoutes}\n          />\n        )\n      },\n    }),\n  })\n)\n\nfunction getAvailableTagsFromRoutes(routes: Route[]): string[] {\n  return Array.from(\n    new Set(\n      [].concat(...routes.map(route => (route.data && route.data.tags) || [])),\n    ),\n  )\n}\n\nexport default tagRoutes\n"],"sourceRoot":""}