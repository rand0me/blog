{"version":3,"sources":["components/BlogPostLayout.module.css","components/Pagination.module.css","utils/formats.ts","components/ArticleMeta.tsx","components/ArticleMeta.module.css","components/BlogIndexPage.module.css","siteMetadata.ts","components/Bio.tsx","utils/getGravatarURL.ts","components/Pagination.tsx","components/BlogIndexPage.tsx","components/NotFoundPage.tsx","components/LoadingIndicator.tsx","components/BlogLayout.tsx","components/BlogPostLayout.tsx","routes/posts/index.ts","routes/index.tsx","components/LoadingIndicator.module.css","components/BlogLayout.module.css","components/ArticleSummary.tsx","components/ArticleSummary.module.css","components/Bio.module.css","serviceWorker.ts","index.tsx"],"names":["module","exports","title","header","footer","bio","links","next","content","Pagination","previous","months","ArticleMeta","blogRoot","data","readingTime","readingTimeElement","minutes","Math","max","round","cups","react_default","a","createElement","Fragment","className","styles","Array","fill","join","dateTime","date","toUTCString","dateString","Date","monthName","getMonth","dayOfMonth","getDate","fourDigitYear","getFullYear","concat","formatDate","tags","length","map","tag","key","es","href","articlesList","siteMetadata","author","description","indexPageSize","Bio","props","photoURL","email","size","defaultURL","hash","md5","toLowerCase","trim","encodeURIComponent","getGravatarURL","src","alt","pageCount","pageNumber","dist_es","String","pages","current","count","BlogIndexPage","postRoutes","components_Bio","route","url","ArticleSummary","components_Pagination","target","style","float","NotFoundPage","NotFound","LoadingIndicator","active","BlogLayout","isViewingIndex","loadingRoute","useLoadingRoute","container","components_LoadingIndicator","render","components_NotFoundPage","BlogPostLayout","_useCurrentRoute","useCurrentRoute","_ref","useView","connect","head","MDXComponent","pathname","esm","components","Link","wrapper","children","previousDetails","nextDetails","postModules","./2019-01-05-welcome/post.ts","__webpack_require__","e","then","bind","importPost","postPathnames","Object","keys","datePattern","postDetails","slug","slugify","replace","dateMatch","match","parseInt","posts","sortBy","reverse","i","getPage","Navi","asyncToGenerator","regenerator_default","mark","_callee2","_ref2","post","getContent","meta","previousSlug","previousPost","nextSlug","nextPost","previousPostDetails","nextPostDetails","wrap","_context2","prev","sent","default","objectWithoutProperties","abrupt","getData","req","context","objectSpread2","getView","_getView","_callee","_ref3","other","_context","stop","apply","this","arguments","chunks","chunk","chunkPagePairs","pageTitle","method","Promise","all","resolve","routes","_x3","components_BlogIndexPage","_x","_x2","compose","withContext","mountpath","withView","path","test","components_BlogLayout","mount","/","shift","/page","/1","redirect","fromPairs","/posts","components_BlogPostLayout","/tags","lazy","/about","/rss","LoadingIndicator-animation","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_navi__WEBPACK_IMPORTED_MODULE_1__","_ArticleMeta__WEBPACK_IMPORTED_MODULE_2__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3___default","spoiler","Boolean","window","location","hostname","register","main","navigation","createBrowserNavigation","getRoute","process","renderer","ReactDOM","hydrate","react_navi_helmet_async_dist_es","hashScrollBehavior","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef3da6b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogPostLayout_title__2L_2_\",\"header\":\"BlogPostLayout_header__1Ny4T\",\"footer\":\"BlogPostLayout_footer__3ofxa\",\"bio\":\"BlogPostLayout_bio__diNn9\",\"links\":\"BlogPostLayout_links__-LX2X\",\"next\":\"BlogPostLayout_next__KrMHx\",\"content\":\"BlogPostLayout_content__1mzTO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__2Xt2h\",\"previous\":\"Pagination_previous__1akUm\",\"next\":\"Pagination_next__7Ba4Y\"};","export let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nexport function formatDate(dateString) {\n  let date = new Date(dateString)\n  let monthName = months[date.getMonth()]\n  let dayOfMonth = date.getDate()\n  let fourDigitYear = date.getFullYear()\n\n  return `${monthName} ${dayOfMonth}, ${fourDigitYear}`\n}","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport { formatDate } from '../utils/formats'\nimport styles from './ArticleMeta.module.css'\n\ninterface ArticleMetaProps {\n  blogRoot: string\n  data: any\n  readingTime?: any\n}\n\nfunction ArticleMeta({ blogRoot, data, readingTime }: ArticleMetaProps) {\n  let readingTimeElement\n  if (readingTime) {\n    let minutes = Math.max(Math.round(readingTime.minutes), 1)\n    let cups = Math.round(minutes / 5)\n    readingTimeElement = (\n      <React.Fragment>\n        {' '}\n        &bull;{' '}\n        <span className={styles.readingTime}>\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\n        </span>\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <small className={styles.ArticleMeta}>\n      <time dateTime={data.date.toUTCString()}>{formatDate(data.date)}</time>\n      {data.tags && data.tags.length && (\n        <>\n          {' '}\n          &bull;{' '}\n          <ul className={styles.tags}>\n            {data.tags.map(tag => (\n              <li key={tag}>\n                <Link href={join(blogRoot, 'tags', tag)}>{tag}</Link>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      {readingTimeElement || null}\n    </small>\n  )\n}\n\nexport default ArticleMeta\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"ArticleMeta_tags__1IJ9w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogIndexPage_title__341hM\",\"articlesList\":\"BlogIndexPage_articlesList__1V39R\",\"footer\":\"BlogIndexPage_footer__1vkZQ\"};","export default {\n  // The blog's title as it appears in the layout header, and in the document\n  // <title> tag.\n  title: 'rand0me blog',\n\n  author: 'Daniil Kolesnik',\n  description:\n    \"A clone of Dan Abramov's overreacted.io using create-react-app-mdx and Navi\",\n  // The number of posts to a page on the site index.\n  indexPageSize: 10,\n}\n","import React from 'react'\nimport styles from './Bio.module.css'\nimport { getGravatarURL } from '../utils/getGravatarURL'\n\ninterface BioProps {\n  className?: string\n}\n\nfunction Bio(props: BioProps) {\n  let photoURL = getGravatarURL({\n    email: \"not.randome@gmail.com\",\n    size: 56,\n  })\n\n  return (\n    <div\n      className={`\n      ${styles.Bio}\n      ${props.className || ''}\n    `}>\n      <img src={photoURL} alt=\"Me\" />\n      <p>\n        Tryin to stay focused.\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import md5 from 'blueimp-md5'\n\ninterface GravatarOptions {\n  email: string,\n  size: number,\n  defaultURL?: string,\n}\n\nexport function getGravatarURL({ email, size, defaultURL = 'identicon' }: GravatarOptions) {\n  let hash = md5(email.toLowerCase().trim())\n  return `https://www.gravatar.com/avatar/${hash}.jpg?s=${size}&d=${encodeURIComponent(defaultURL)}`\n}\n","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './Pagination.module.css'\n\ninterface PaginationProps {\n  blogRoot: string\n  pageCount: number\n  pageNumber: number\n}\n\nfunction Pagination({ blogRoot, pageCount, pageNumber }: PaginationProps) {\n  return (\n    <small className={styles.Pagination}>\n      {pageNumber !== 1 && (\n        <Link\n          className={styles.previous}\n          href={join(blogRoot, 'page', String(pageNumber - 1))}>\n          ← Previous\n        </Link>\n      )}\n      <span className={styles.pages}>\n        {' '}\n        Page <span className={styles.current}>{pageNumber}</span>/\n        <span className={styles.count}>{pageCount}</span>{' '}\n      </span>\n      {pageNumber < pageCount && (\n        <Link\n          className={styles.next}\n          href={join(blogRoot, 'page', String(pageNumber + 1))}>\n          Next →\n        </Link>\n      )}\n    </small>\n  )\n}\n\nexport default Pagination\n","import { Route } from 'navi'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport ArticleSummary from './ArticleSummary'\nimport Bio from './Bio'\nimport Pagination from './Pagination'\nimport styles from './BlogIndexPage.module.css'\n\ninterface BlogIndexPageProps {\n  blogRoot: string\n  pageCount: number\n  pageNumber: number\n  postRoutes: Route[]\n}\n\nfunction BlogIndexPage({\n  blogRoot,\n  pageCount,\n  pageNumber,\n  postRoutes,\n}: BlogIndexPageProps) {\n  return (\n    <div>\n      <header>\n        <h1 className={styles.title}>\n          <Link href={blogRoot}>{siteMetadata.title}</Link>\n        </h1>\n        <Bio />\n      </header>\n      <ul className={styles.articlesList}>\n        {postRoutes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        ))}\n      </ul>\n      {pageCount > 1 && (\n        <Pagination\n          blogRoot={blogRoot}\n          pageCount={pageCount}\n          pageNumber={pageNumber}\n        />\n      )}\n      <footer className={styles.footer}>\n        <div>\n          <a href=\"./rss.xml\" target=\"_blank\" style={{ float: 'right' }}>\n            RSS\n          </a>\n          <Link href=\"./about\">About</Link> &bull;{' '}\n          <Link href=\"./tags\">Tags</Link> &bull;{' '}\n          <a href=\"https://github.com/frontarm/create-react-blog\">\n            Source\n          </a>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default BlogIndexPage\n","import React from 'react'\nimport styles from './NotFoundPage.module.css'\n\n// Note that create-react-navi-app will always show an error screen when this\n// is rendered. This is because the underlying react-scripts package shows\n// the error screen when a NotFoundError is thrown, even though it's caught\n// by <NotFoundBoundary>. To see the error rendered by this function,\n// you'll just need to close the error overlay with the \"x\" at the top right.\nfunction NotFoundPage() {\n  return (\n    <div className={styles.NotFound}>\n      <h1>404 - Not Found</h1>\n    </div>\n  )\n}\n\nexport default NotFoundPage\n","import React from 'react'\nimport styles from './LoadingIndicator.module.css'\n\ninterface LoadingIndicatorProps {\n  active?: boolean\n  className?: string\n  style?: React.CSSProperties\n}\n\nfunction LoadingIndicator({ active, className, style }: LoadingIndicatorProps) {\n  return (\n    <div\n      className={`\n        ${styles.LoadingIndicator}\n        ${active ? styles.active : ''}\n        ${className}\n      `}\n      style={style}\n    />\n  )\n}\n\nexport default LoadingIndicator\n","import React from 'react'\nimport {\n  Link,\n  NotFoundBoundary,\n  View,\n  useLoadingRoute\n} from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport NotFoundPage from './NotFoundPage'\nimport LoadingIndicator from './LoadingIndicator'\nimport styles from './BlogLayout.module.css'\n\ninterface BlogLayoutProps {\n  blogRoot: string\n  isViewingIndex: boolean\n}\n\nfunction BlogLayout({ blogRoot, isViewingIndex }: BlogLayoutProps) {\n  let loadingRoute = useLoadingRoute()\n  return (\n    <div className={styles.container}>\n      <LoadingIndicator active={!!loadingRoute} />\n\n      {// Don't show the header on index pages, as it has a special\n      // header.\n      !isViewingIndex && (\n        <header>\n          <h3 className={styles.title}>\n            <Link href={blogRoot}>{siteMetadata.title}</Link>\n          </h3>\n        </header>\n      )}\n\n      <main>\n        <NotFoundBoundary render={() => <NotFoundPage />}>\n          <View />\n        </NotFoundBoundary>\n      </main>\n    </div>\n  )\n}\n\nexport default BlogLayout\n","import React from 'react'\nimport { Link, useCurrentRoute, useView } from 'react-navi'\nimport { MDXProvider } from '@mdx-js/react'\nimport siteMetadata from '../siteMetadata'\nimport ArticleMeta from './ArticleMeta'\nimport Bio from './Bio'\nimport styles from './BlogPostLayout.module.css'\n\ninterface BlogPostLayoutProps {\n  blogRoot: string\n}\n\nfunction BlogPostLayout({ blogRoot }: BlogPostLayoutProps) {\n  let { title, data, url } = useCurrentRoute()\n  let { connect, content, head } = useView()!\n  let { MDXComponent, readingTime } = content\n\n  // The content for posts is an MDX component, so we'll need\n  // to use <MDXProvider> to ensure that links are rendered\n  // with <Link>, and thus use pushState.\n  return connect(\n    <>\n      {head}\n      <article className={styles.container}>\n        <header className={styles.header}>\n          <h1 className={styles.title}>\n            <Link href={url.pathname}>{title}</Link>\n          </h1>\n          <ArticleMeta\n            blogRoot={blogRoot}\n            data={data}\n            readingTime={readingTime}\n          />\n        </header>\n        <MDXProvider\n          components={{\n            a: Link,\n            wrapper: ({ children }) => (\n              <div className={styles.content}>{children}</div>\n            ),\n          }}>\n          <MDXComponent />\n        </MDXProvider>\n        <footer className={styles.footer}>\n          <h3 className={styles.title}>\n            <Link href={blogRoot}>{siteMetadata.title}</Link>\n          </h3>\n          <Bio className={styles.bio} />\n          <section className={styles.links}>\n            {data.previousDetails && (\n              <Link\n                className={styles.previous}\n                href={data.previousDetails.href}>\n                ← {data.previousDetails.title}\n              </Link>\n            )}\n            {data.nextDetails && (\n              <Link className={styles.next} href={data.nextDetails.href}>\n                {data.nextDetails.title} →\n              </Link>\n            )}\n          </section>\n        </footer>\n      </article>\n    </>\n  )\n}\n\nexport default BlogPostLayout\n","import importAll from 'import-all.macro'\nimport * as Navi from 'navi'\nimport { join } from 'path'\nimport { sortBy } from 'lodash'\nimport slugify from 'slugify'\n\ninterface Context {\n  blogRoot: string\n}\n\n// Get a list of all posts, that will not be loaded until the user\n// requests them.\nconst postModules = importAll.deferred('./**/post.ts?(x)')\nconst importPost = pathname => postModules[pathname]()\nconst postPathnames = Object.keys(postModules)\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\n\nlet postDetails = postPathnames.map(pathname => {\n  let slug = slugify(\n    pathname.replace(/post.tsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\n  )\n    .replace(/^[-.]+|[.-]+$/g, '')\n    .replace(datePattern, '$1/')\n\n  let date\n  let dateMatch = slug.match(datePattern)\n  if (dateMatch) {\n    date = new Date(\n      parseInt(dateMatch[2], 10),\n      parseInt(dateMatch[3], 10) - 1,\n      parseInt(dateMatch[4], 10),\n    )\n  }\n\n  return {\n    slug,\n    pathname,\n    date,\n  }\n})\n\n// Sort the pages by slug (which contain the dates)\npostDetails = sortBy(postDetails, ['slug']).reverse()\n\n// Create url-friendly slugs from post pathnames, and a `getPage()` function\n// that can be used to load and return the post's Page object.\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\n  getPage: Navi.map(async () => {\n    let { default: post } = await importPost(pathname)\n    let { title, getContent, ...meta } = post\n    let previousSlug, previousPost, nextSlug, nextPost\n\n    if (i !== 0) {\n      let previousPostDetails = postDetails[i - 1]\n      previousPost = (await importPost(previousPostDetails.pathname)).default\n      previousSlug = previousPostDetails.slug\n    }\n\n    if (i + 1 < postDetails.length) {\n      let nextPostDetails = postDetails[i + 1]\n      nextPost = (await importPost(nextPostDetails.pathname)).default\n      nextSlug = nextPostDetails.slug\n    }\n\n    return Navi.route({\n      title,\n      getData: (req, context: Context) => ({\n        date,\n        pathname,\n        slug,\n        previousDetails: previousPost && {\n          title: previousPost.title,\n          href: join(context.blogRoot, 'posts', previousSlug),\n        },\n        nextDetails: nextPost && {\n          title: nextPost.title,\n          href: join(context.blogRoot, 'posts', nextSlug),\n        },\n        ...meta,\n      }),\n      getView: async () => {\n        let { default: MDXComponent, ...other } = await getContent()\n        return { MDXComponent, ...other }\n      },\n    })\n  }),\n  slug,\n}))\n\nexport default posts\n","import { compose, lazy, map, mount, redirect, resolve, route, withContext, withView, Route } from 'navi'\nimport React from 'react'\nimport { join } from 'path'\nimport { chunk, fromPairs } from 'lodash'\nimport BlogIndexPage from '../components/BlogIndexPage'\nimport BlogLayout from '../components/BlogLayout'\nimport BlogPostLayout from '../components/BlogPostLayout'\nimport siteMetadata from '../siteMetadata'\nimport posts from './posts'\n\ninterface AppNavContext {\n  blogRoot: string\n}\n\n// Split the posts into a list of chunks of the given size, and\n// then build index pages for each chunk.\nlet chunks = chunk(posts, siteMetadata.indexPageSize)\nlet chunkPagePairs = chunks.map((chunk, i) => [\n  '/' + (i + 1),\n  map<AppNavContext>(async (req, context) => {\n    // Don't load anything when just crawling\n    if (req.method === 'HEAD') {\n      return route()\n    }\n\n    // Get metadata for all pages on this page\n    let postRoutes = await Promise.all<Route>(\n      chunk.map(async post => {\n        let href = join(context.blogRoot, 'posts', post.slug)\n        return await resolve({\n          // If you want to show the page content on the index page, set\n          // this to 'GET' to be able to access it.\n          method: 'HEAD',\n          routes,\n          url: href,\n        })\n      }),\n    )\n\n    // Only add a page number to the page title after the first index page.\n    let pageTitle = siteMetadata.title\n    if (i > 0) {\n      pageTitle += ` – page ${i + 1}`\n    }\n\n    return route({\n      title: pageTitle,\n      getView: () => (\n        <BlogIndexPage\n          blogRoot={context.blogRoot}\n          pageNumber={i + 1}\n          pageCount={chunks.length}\n          postRoutes={postRoutes}\n        />\n      ),\n    })\n  }),\n])\n\nconst routes = compose(\n  withContext((req, context): AppNavContext => ({\n    // By adding the point at which the blog was mounted to context, it\n    // makes it possible to easily scope all URLs to the blog root, thus\n    // making it possible to mount the entire route on a subdirectory.\n    blogRoot: req.mountpath || '/',\n    ...context,\n  })),\n  withView((req, context) => {\n    // Check if the current page is an index page by comparing the remaining\n    // portion of the URL's pathname with the index page paths.\n    let isViewingIndex = req.path === '/' || /^\\/page\\/\\d+\\/$/.test(req.path)\n\n    // Wrap the current page's content with a React Context to pass global\n    // configuration to the blog's components.\n    return (\n      <BlogLayout\n        blogRoot={context.blogRoot}\n        isViewingIndex={isViewingIndex}\n      />\n    )\n  }),\n  mount({\n    // The blog's index pages go here. The first index page is mapped to the\n    // root URL, with a redirect from \"/page/1\". Subsequent index pages are\n    // mapped to \"/page/n\".\n    '/': chunkPagePairs.shift()[1],\n    '/page': mount({\n      '/1': redirect((req, context: AppNavContext) => context.blogRoot),\n      ...fromPairs(chunkPagePairs),\n    }),\n\n    // Put posts under \"/posts\", so that they can be wrapped with a\n    // \"<BlogPostLayout />\" that configures MDX and adds a post-specific layout.\n    '/posts': compose(\n      withView((req, context: AppNavContext) => <BlogPostLayout blogRoot={context.blogRoot} />),\n      mount(fromPairs(posts.map(post => ['/' + post.slug, post.getPage]))),\n    ),\n\n    // Miscellaneous pages can be added directly to the root switch.\n    '/tags': lazy(() => import('./tags')),\n    '/about': lazy(() => import('./about')),\n\n    // Only the statically built copy of the RSS feed is intended to be opened,\n    // but the route is defined here so that the static renderer will pick it\n    // up.\n    '/rss': route(),\n  }),\n)\n\nexport default routes\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIndicator\":\"LoadingIndicator_LoadingIndicator__3KSl0\",\"active\":\"LoadingIndicator_active__3EncM\",\"LoadingIndicator-animation\":\"LoadingIndicator_LoadingIndicator-animation__2icwd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout_container__1fiRb\",\"title\":\"BlogLayout_title__3HyDU\"};","import { Route } from 'navi'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport ArticleMeta from './ArticleMeta'\nimport styles from './ArticleSummary.module.css'\n\ninterface ArticleSummaryProps {\n  blogRoot: string\n  route: Route\n}\n\nfunction ArticleSummary({ blogRoot, route }: ArticleSummaryProps) {\n  return (\n    <article className={styles.ArticleSummary}>\n      <h2>\n        <Link href={route.url.href}>{route.title}</Link>\n      </h2>\n      <ArticleMeta blogRoot={blogRoot} data={route.data} />\n      <p>{route.data.spoiler}</p>\n    </article>\n  )\n}\n\nexport default ArticleSummary\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArticleSummary\":\"ArticleSummary_ArticleSummary__3I5Qk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__1ks_2\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import register from 'navi-scripts/register'\nimport { createBrowserNavigation } from 'navi'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router } from 'react-navi'\nimport HelmetProvider from 'react-navi-helmet-async'\nimport './index.module.css'\nimport routes from './routes'\nimport * as serviceWorker from './serviceWorker'\n\n// `register()` is responsible for exporting your app's pages and App\n// component to the static renderer, and for starting the app with the\n// `main()` function when running within a browser.\nregister({\n  // Specify the pages that navi-app should statically build, by passing in a\n  // Switch object.\n  routes,\n\n  // This will only be called when loading your app in the browser. It won't\n  // be called when performing static generation.\n  async main() {\n    let navigation = createBrowserNavigation({ routes })\n\n    // Wait until the navigation has loaded the page's content, or failed to do\n    // so. If you want to load other data in parallel while the initial page is\n    // loading, make sure to start loading before this line.\n    await navigation.getRoute()\n\n    // React requires that you call `ReactDOM.hydrate` if there is statically\n    // rendered content in the root element, but prefers us to call\n    // `ReactDOM.render` when it is empty.\n    let hasStaticContent = process.env.NODE_ENV === 'production'\n    let renderer = hasStaticContent ? ReactDOM.hydrate : ReactDOM.render\n\n    // Start react, passing in the current navigation state and\n    // rendering the top-level view.\n    renderer(\n      <HelmetProvider>\n        <Router hashScrollBehavior='smooth' navigation={navigation} />\n      </HelmetProvider>,\n      document.getElementById(\"root\")\n    )\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister()\n  },\n})\n"],"sourceRoot":""}